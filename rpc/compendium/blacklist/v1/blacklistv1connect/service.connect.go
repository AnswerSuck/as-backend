// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: compendium/blacklist/v1/service.proto

package blacklistv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ysomad/answersuck/rpc/compendium/blacklist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BlackListServiceName is the fully-qualified name of the BlackListService service.
	BlackListServiceName = "compendium.blacklist.v1.BlackListService"
)

// BlackListServiceClient is a client for the compendium.blacklist.v1.BlackListService service.
type BlackListServiceClient interface {
	// FindBannedWord searches for a word in database of banned words and returns true if word is found.
	FindBannedWord(context.Context, *connect_go.Request[v1.FindBannedWordRequest]) (*connect_go.Response[v1.FindBannedWordResponse], error)
}

// NewBlackListServiceClient constructs a client for the compendium.blacklist.v1.BlackListService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlackListServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BlackListServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blackListServiceClient{
		findBannedWord: connect_go.NewClient[v1.FindBannedWordRequest, v1.FindBannedWordResponse](
			httpClient,
			baseURL+"/compendium.blacklist.v1.BlackListService/FindBannedWord",
			opts...,
		),
	}
}

// blackListServiceClient implements BlackListServiceClient.
type blackListServiceClient struct {
	findBannedWord *connect_go.Client[v1.FindBannedWordRequest, v1.FindBannedWordResponse]
}

// FindBannedWord calls compendium.blacklist.v1.BlackListService.FindBannedWord.
func (c *blackListServiceClient) FindBannedWord(ctx context.Context, req *connect_go.Request[v1.FindBannedWordRequest]) (*connect_go.Response[v1.FindBannedWordResponse], error) {
	return c.findBannedWord.CallUnary(ctx, req)
}

// BlackListServiceHandler is an implementation of the compendium.blacklist.v1.BlackListService
// service.
type BlackListServiceHandler interface {
	// FindBannedWord searches for a word in database of banned words and returns true if word is found.
	FindBannedWord(context.Context, *connect_go.Request[v1.FindBannedWordRequest]) (*connect_go.Response[v1.FindBannedWordResponse], error)
}

// NewBlackListServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlackListServiceHandler(svc BlackListServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/compendium.blacklist.v1.BlackListService/FindBannedWord", connect_go.NewUnaryHandler(
		"/compendium.blacklist.v1.BlackListService/FindBannedWord",
		svc.FindBannedWord,
		opts...,
	))
	return "/compendium.blacklist.v1.BlackListService/", mux
}

// UnimplementedBlackListServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlackListServiceHandler struct{}

func (UnimplementedBlackListServiceHandler) FindBannedWord(context.Context, *connect_go.Request[v1.FindBannedWordRequest]) (*connect_go.Response[v1.FindBannedWordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("compendium.blacklist.v1.BlackListService.FindBannedWord is not implemented"))
}
