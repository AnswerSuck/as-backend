// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: peasant/v1/email_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _email_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VerificationCode

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailResponseMultiError, or nil if none found.
func (m *VerifyEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyEmailResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyEmailResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyEmailResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyEmailResponseMultiError(errors)
	}

	return nil
}

// VerifyEmailResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailResponseMultiError) AllErrors() []error { return m }

// VerifyEmailResponseValidationError is the validation error returned by
// VerifyEmailResponse.Validate if the designated constraints aren't met.
type VerifyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailResponseValidationError) ErrorName() string {
	return "VerifyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailResponseValidationError{}

// Validate checks the field values on UpdateEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmailRequestMultiError, or nil if none found.
func (m *UpdateEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = UpdateEmailRequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetNewEmail()); err != nil {
		err = UpdateEmailRequestValidationError{
			field:  "NewEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateEmailRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *UpdateEmailRequest) _validateUuid(uuid string) error {
	if matched := _email_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateEmailRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailRequestMultiError) AllErrors() []error { return m }

// UpdateEmailRequestValidationError is the validation error returned by
// UpdateEmailRequest.Validate if the designated constraints aren't met.
type UpdateEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailRequestValidationError) ErrorName() string {
	return "UpdateEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailRequestValidationError{}

// Validate checks the field values on UpdateEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmailResponseMultiError, or nil if none found.
func (m *UpdateEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmailResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmailResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmailResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmailResponseMultiError(errors)
	}

	return nil
}

// UpdateEmailResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailResponseMultiError) AllErrors() []error { return m }

// UpdateEmailResponseValidationError is the validation error returned by
// UpdateEmailResponse.Validate if the designated constraints aren't met.
type UpdateEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailResponseValidationError) ErrorName() string {
	return "UpdateEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailResponseValidationError{}

// Validate checks the field values on SendVerificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerificationRequestMultiError, or nil if none found.
func (m *SendVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = SendVerificationRequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendVerificationRequestMultiError(errors)
	}

	return nil
}

func (m *SendVerificationRequest) _validateUuid(uuid string) error {
	if matched := _email_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendVerificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendVerificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerificationRequestMultiError) AllErrors() []error { return m }

// SendVerificationRequestValidationError is the validation error returned by
// SendVerificationRequest.Validate if the designated constraints aren't met.
type SendVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationRequestValidationError) ErrorName() string {
	return "SendVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationRequestValidationError{}

// Validate checks the field values on SendVerificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerificationResponseMultiError, or nil if none found.
func (m *SendVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendVerificationResponseMultiError(errors)
	}

	return nil
}

// SendVerificationResponseMultiError is an error wrapping multiple validation
// errors returned by SendVerificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerificationResponseMultiError) AllErrors() []error { return m }

// SendVerificationResponseValidationError is the validation error returned by
// SendVerificationResponse.Validate if the designated constraints aren't met.
type SendVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationResponseValidationError) ErrorName() string {
	return "SendVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationResponseValidationError{}
