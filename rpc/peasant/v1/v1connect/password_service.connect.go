// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: peasant/v1/password_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ysomad/answersuck/rpc/peasant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PasswordServiceName is the fully-qualified name of the PasswordService service.
	PasswordServiceName = "peasant.v1.PasswordService"
)

// PasswordServiceClient is a client for the peasant.v1.PasswordService service.
type PasswordServiceClient interface {
	// ResetPassword sends an email to account email with short-term token
	// which may be used for updating account password.
	ResetPassword(context.Context, *connect_go.Request[v1.ResetPasswordRequest]) (*connect_go.Response[v1.ResetPasswordResponse], error)
	// SetPassword sets new account password by using token from ResetPassword.
	SetPassword(context.Context, *connect_go.Request[v1.SetPasswordRequest]) (*connect_go.Response[v1.SetPasswordResponse], error)
	// UpdatePassword updates account password if old one is correct.
	UpdatePassword(context.Context, *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error)
}

// NewPasswordServiceClient constructs a client for the peasant.v1.PasswordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPasswordServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PasswordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &passwordServiceClient{
		resetPassword: connect_go.NewClient[v1.ResetPasswordRequest, v1.ResetPasswordResponse](
			httpClient,
			baseURL+"/peasant.v1.PasswordService/ResetPassword",
			opts...,
		),
		setPassword: connect_go.NewClient[v1.SetPasswordRequest, v1.SetPasswordResponse](
			httpClient,
			baseURL+"/peasant.v1.PasswordService/SetPassword",
			opts...,
		),
		updatePassword: connect_go.NewClient[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse](
			httpClient,
			baseURL+"/peasant.v1.PasswordService/UpdatePassword",
			opts...,
		),
	}
}

// passwordServiceClient implements PasswordServiceClient.
type passwordServiceClient struct {
	resetPassword  *connect_go.Client[v1.ResetPasswordRequest, v1.ResetPasswordResponse]
	setPassword    *connect_go.Client[v1.SetPasswordRequest, v1.SetPasswordResponse]
	updatePassword *connect_go.Client[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse]
}

// ResetPassword calls peasant.v1.PasswordService.ResetPassword.
func (c *passwordServiceClient) ResetPassword(ctx context.Context, req *connect_go.Request[v1.ResetPasswordRequest]) (*connect_go.Response[v1.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// SetPassword calls peasant.v1.PasswordService.SetPassword.
func (c *passwordServiceClient) SetPassword(ctx context.Context, req *connect_go.Request[v1.SetPasswordRequest]) (*connect_go.Response[v1.SetPasswordResponse], error) {
	return c.setPassword.CallUnary(ctx, req)
}

// UpdatePassword calls peasant.v1.PasswordService.UpdatePassword.
func (c *passwordServiceClient) UpdatePassword(ctx context.Context, req *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error) {
	return c.updatePassword.CallUnary(ctx, req)
}

// PasswordServiceHandler is an implementation of the peasant.v1.PasswordService service.
type PasswordServiceHandler interface {
	// ResetPassword sends an email to account email with short-term token
	// which may be used for updating account password.
	ResetPassword(context.Context, *connect_go.Request[v1.ResetPasswordRequest]) (*connect_go.Response[v1.ResetPasswordResponse], error)
	// SetPassword sets new account password by using token from ResetPassword.
	SetPassword(context.Context, *connect_go.Request[v1.SetPasswordRequest]) (*connect_go.Response[v1.SetPasswordResponse], error)
	// UpdatePassword updates account password if old one is correct.
	UpdatePassword(context.Context, *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error)
}

// NewPasswordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPasswordServiceHandler(svc PasswordServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/peasant.v1.PasswordService/ResetPassword", connect_go.NewUnaryHandler(
		"/peasant.v1.PasswordService/ResetPassword",
		svc.ResetPassword,
		opts...,
	))
	mux.Handle("/peasant.v1.PasswordService/SetPassword", connect_go.NewUnaryHandler(
		"/peasant.v1.PasswordService/SetPassword",
		svc.SetPassword,
		opts...,
	))
	mux.Handle("/peasant.v1.PasswordService/UpdatePassword", connect_go.NewUnaryHandler(
		"/peasant.v1.PasswordService/UpdatePassword",
		svc.UpdatePassword,
		opts...,
	))
	return "/peasant.v1.PasswordService/", mux
}

// UnimplementedPasswordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPasswordServiceHandler struct{}

func (UnimplementedPasswordServiceHandler) ResetPassword(context.Context, *connect_go.Request[v1.ResetPasswordRequest]) (*connect_go.Response[v1.ResetPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("peasant.v1.PasswordService.ResetPassword is not implemented"))
}

func (UnimplementedPasswordServiceHandler) SetPassword(context.Context, *connect_go.Request[v1.SetPasswordRequest]) (*connect_go.Response[v1.SetPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("peasant.v1.PasswordService.SetPassword is not implemented"))
}

func (UnimplementedPasswordServiceHandler) UpdatePassword(context.Context, *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("peasant.v1.PasswordService.UpdatePassword is not implemented"))
}
