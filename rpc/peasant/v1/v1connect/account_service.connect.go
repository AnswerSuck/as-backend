// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: peasant/v1/account_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ysomad/answersuck/rpc/peasant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "peasant.v1.AccountService"
)

// AccountServiceClient is a client for the peasant.v1.AccountService service.
type AccountServiceClient interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	GetAccountById(context.Context, *connect_go.Request[v1.GetAccountByIdRequest]) (*connect_go.Response[v1.GetAccountByIdResponse], error)
	DeleteAccountById(context.Context, *connect_go.Request[v1.DeleteAccountByIdRequest]) (*connect_go.Response[v1.DeleteAccountByIdResponse], error)
}

// NewAccountServiceClient constructs a client for the peasant.v1.AccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		createAccount: connect_go.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+"/peasant.v1.AccountService/CreateAccount",
			opts...,
		),
		getAccountById: connect_go.NewClient[v1.GetAccountByIdRequest, v1.GetAccountByIdResponse](
			httpClient,
			baseURL+"/peasant.v1.AccountService/GetAccountById",
			opts...,
		),
		deleteAccountById: connect_go.NewClient[v1.DeleteAccountByIdRequest, v1.DeleteAccountByIdResponse](
			httpClient,
			baseURL+"/peasant.v1.AccountService/DeleteAccountById",
			opts...,
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	createAccount     *connect_go.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	getAccountById    *connect_go.Client[v1.GetAccountByIdRequest, v1.GetAccountByIdResponse]
	deleteAccountById *connect_go.Client[v1.DeleteAccountByIdRequest, v1.DeleteAccountByIdResponse]
}

// CreateAccount calls peasant.v1.AccountService.CreateAccount.
func (c *accountServiceClient) CreateAccount(ctx context.Context, req *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// GetAccountById calls peasant.v1.AccountService.GetAccountById.
func (c *accountServiceClient) GetAccountById(ctx context.Context, req *connect_go.Request[v1.GetAccountByIdRequest]) (*connect_go.Response[v1.GetAccountByIdResponse], error) {
	return c.getAccountById.CallUnary(ctx, req)
}

// DeleteAccountById calls peasant.v1.AccountService.DeleteAccountById.
func (c *accountServiceClient) DeleteAccountById(ctx context.Context, req *connect_go.Request[v1.DeleteAccountByIdRequest]) (*connect_go.Response[v1.DeleteAccountByIdResponse], error) {
	return c.deleteAccountById.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the peasant.v1.AccountService service.
type AccountServiceHandler interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	GetAccountById(context.Context, *connect_go.Request[v1.GetAccountByIdRequest]) (*connect_go.Response[v1.GetAccountByIdResponse], error)
	DeleteAccountById(context.Context, *connect_go.Request[v1.DeleteAccountByIdRequest]) (*connect_go.Response[v1.DeleteAccountByIdResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/peasant.v1.AccountService/CreateAccount", connect_go.NewUnaryHandler(
		"/peasant.v1.AccountService/CreateAccount",
		svc.CreateAccount,
		opts...,
	))
	mux.Handle("/peasant.v1.AccountService/GetAccountById", connect_go.NewUnaryHandler(
		"/peasant.v1.AccountService/GetAccountById",
		svc.GetAccountById,
		opts...,
	))
	mux.Handle("/peasant.v1.AccountService/DeleteAccountById", connect_go.NewUnaryHandler(
		"/peasant.v1.AccountService/DeleteAccountById",
		svc.DeleteAccountById,
		opts...,
	))
	return "/peasant.v1.AccountService/", mux
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("peasant.v1.AccountService.CreateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccountById(context.Context, *connect_go.Request[v1.GetAccountByIdRequest]) (*connect_go.Response[v1.GetAccountByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("peasant.v1.AccountService.GetAccountById is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccountById(context.Context, *connect_go.Request[v1.DeleteAccountByIdRequest]) (*connect_go.Response[v1.DeleteAccountByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("peasant.v1.AccountService.DeleteAccountById is not implemented"))
}
