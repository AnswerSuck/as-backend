syntax = "proto3";

package package.v1;
option go_package = "package/v1;packagev1";

import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

service StageQuestionService {
    // CreateStageQuestion adds question for topic in package stage.
    rpc CreateStageQuestion(CreateStageQuestionRequest) returns (CreateStageQuestionResponse);

    // GetStageQuestion returns stage question.
    rpc GetStageQuestion(GetStageQuestionRequest) returns (GetStageQuestionResponse);

    // UpdateStageQuestionsCost updates cost for multiple questions.
    rpc UpdateStageQuestionsCost(UpdateStageQuestionsCostRequest) returns (UpdateStageQuestionsCostRequest);
}

enum TransferType {
    TRANSFER_TYPE_UNSPECIFIED = 0;
    BEFORE = 1;
    AFTER = 2;
    NEVER = 3;
}

enum StageQuestionType {
    STAGE_QUESTION_TYPE_UNSPECIFIED = 0;
    STANDARD = 1;
    SAFE = 2;
    SECRET = 3;
    SUPER_SECRET = 4;
    AUCTION = 5;
}

message StageQuestion {
    message Question {
        int32 id = 1;
        string text = 2;
        string author = 3;
        string media_url = 4;
        google.protobuf.Timestamp creation_time = 50;
    }

    message Answer {
        int32 id = 1;
        string text = 2;
        string author = 3;
        string media_url = 4;
        google.protobuf.Timestamp creation_time = 50;
    }

    int32 id = 1;
    int32 stage_id = 2;
    int32 topic_id = 3;
    Question question = 4;
    StageQuestionType question_type = 5;
    int32 question_cost = 6;
    Answer answer = 7; 
    int32 answer_time = 8;
    string host_comment = 9;
    string secret_topic = 10;
    int32 secret_cost = 11;
    TransferType transfer_type = 12;
    bool is_keepable = 13;
}

message CreateStageQuestionRequest {
    int32 question_id = 1; // required
    int32 topic_id = 2; // required
    int32 stage_id = 3; // required
    StageQuestionType question_type = 4 [(validate.rules).enum = { in: [1,2,3,4,5] }]; // required
    int32 question_cost = 5 [(validate.rules).int32 = { gte: 1 }]; // required
    int32 answer_time = 6 [(validate.rules).int32 = { gte: 5, lte: 60 }]; // required
    string host_comment = 7;
    string secret_topic = 8;
    int32 secret_cost = 9;
    bool is_keepable = 10;
    TransferType transfer_type = 11 [(validate.rules).enum = { in: [1,2,3] }];
}

message CreateStageQuestionResponse {
    StageQuestion stage_question = 1;
}

message GetStageQuestionRequest {
    int32 stage_question_id = 1; // required
}

message GetStageQuestionResponse {
    StageQuestion stage_question = 1;
}

message UpdateStageQuestionsCostRequest {
    message Question {

    }

    int32 stage_id = 1; // required
    repeated Question questions = 2 [(validate.rules).repeated = { min_items: 1, max_items: 10 }]; // required
}

message UpdateStageQuestionsCostResponse {}