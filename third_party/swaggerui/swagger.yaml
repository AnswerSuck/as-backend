---
openapi: 3.0.0
info:
  title: Answersuck backend API
  contact:
    email: contact@answersuck.com
  version: 0.0.1
servers:
- url: http://localhost:8080/api/v1
  description: Local server
tags:
- name: account
  description: Account operations
- name: auth
  description: Authentication operations
- name: session
  description: Session operations
paths:
  /accounts:
    get:
      tags:
      - account
      summary: Get account
      operationId: accountGet
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "401":
          description: Unauthorized or expired session.
        "404":
          description: Account not found.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
    post:
      tags:
      - account
      summary: Create account
      description: This can only be done by providing email, username and password
      operationId: accountCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateRequest'
        required: true
      responses:
        "201":
          description: Account created.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "409":
          description: Account with given email or username already exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
    delete:
      tags:
      - account
      summary: Delete account
      description: Only account with state set to `isArchive=false` can be deleted. Access token should be provided at query param, request it at `/auth/token/`.
      operationId: accountDelete
      parameters:
      - name: token
        in: query
        description: Short live access token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Account deleted.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=; Path=v1; Max-Age=-1; HttpOnly; Secure
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Account not found.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /accounts/verification:
    put:
      tags:
      - account
      summary: Verify email
      description: To verify email, code as query parameter should be provided
      operationId: accountVerifyEmail
      parameters:
      - name: code
        in: query
        description: Verification code
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Email has been verified.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized or expired session.
        "403":
          description: Invalid or expired access token.
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
    post:
      tags:
      - account
      summary: Send verification email
      description: Send email verification to email address linked to the account
      operationId: accountRequestVerification
      responses:
        "202":
          description: Email verification link sent.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized or expired session.
        "404":
          description: Account not found.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /accounts/password/reset:
    put:
      tags:
      - account
      summary: Reset password
      description: To set new password, access token should be provided along side with new password
      operationId: accountResetPassword
      parameters:
      - name: token
        in: query
        description: Short live access token
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountResetPasswordRequest'
        required: true
      responses:
        "204":
          description: New password set.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "403":
          description: Invalid or expired access token.
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
    post:
      tags:
      - account
      summary: Send reset password link
      description: To request link to password reset, email or username should be provided. Email with code will be sent on success.
      operationId: accountForgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountForgotPasswordRequest'
        required: true
      responses:
        "202":
          description: Email with link sent.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
  /auth/login:
    post:
      tags:
      - auth
      summary: Login
      description: Creates new session and sets its id in cookies. Login might be email or username.
      operationId: authLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Logged in.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=XN6StCMLLT4Ijc1fGhZPj83PJ2gjHrPB; Path=v1; Max-Age=60; HttpOnly; Secure
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "401":
          description: Incorrect email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "406":
          description: Already logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
  /auth/logout:
    post:
      tags:
      - auth
      summary: Logout
      description: Log out from current session
      operationId: authLogout
      responses:
        "204":
          description: Successful operation.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=; Path=v1; Max-Age=-1; HttpOnly; Secure
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /auth/token:
    post:
      tags:
      - auth
      summary: Request access token
      description: Request short live token which can be used to perform protected operations. Each token can be accepted by only one resource. Resource URI example - `localhost:8080/api/v1/sessions/:sessionId`
      operationId: authToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /sessions:
    get:
      tags:
      - session
      summary: Get sessions
      operationId: sessionGetAccount
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionArray'
        "401":
          description: Unauthorized.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
    delete:
      tags:
      - session
      summary: Terminate all sessions
      description: To terminate all user sessions, access token should be provided at query param, request it at `/auth/token/`
      operationId: sessionDelete
      parameters:
      - name: token
        in: query
        description: Short live access token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful operation.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Invalid or expired access token.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /sessions/{sessionId}:
    delete:
      tags:
      - session
      summary: Terminate session
      description: To terminate user session access token should be provided at query parameters, request it at `/auth/token/`
      operationId: sessionDeleteUser
      parameters:
      - name: sessionId
        in: path
        description: String ID of the session to terminate
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: token
        in: query
        description: Short live access token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful operation.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized.
        "403":
          description: Invalid or expired access token.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: string
          description: UUID v4
          format: uuid
        username:
          maxLength: 16
          minLength: 4
          type: string
        email:
          maxLength: 255
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        archived:
          type: boolean
          description: false by default
        verified:
          type: boolean
          description: false by default, true for social auth
        avatarUrl:
          type: string
          format: url
    AccountCreateRequest:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 16
          minLength: 4
          type: string
        email:
          maxLength: 255
          type: string
          format: email
        password:
          maxLength: 64
          minLength: 8
          type: string
          format: password
    AccountForgotPasswordRequest:
      required:
      - login
      type: object
      properties:
        login:
          type: string
          format: email or username
    AccountResetPasswordRequest:
      required:
      - password
      type: object
      properties:
        password:
          maxLength: 64
          minLength: 4
          type: string
          format: password
    LoginRequest:
      required:
      - login
      - password
      type: object
      properties:
        login:
          type: string
          format: email or username
        password:
          type: string
          format: password
    AccessTokenRequest:
      required:
      - audience
      - password
      type: object
      properties:
        audience:
          type: string
          format: uri
        password:
          type: string
          format: password
    AccessTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token contains Account ID as subject, audience in payload
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        detail:
          type: string
    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: string
        detail:
          $ref: '#/components/schemas/ValidationErrorResponseDetail'
    ValidationErrorResponseDetail:
      type: object
      properties:
        fieldName:
          type: string
    Session:
      type: object
      properties:
        id:
          type: string
        userAgent:
          type: string
        ip:
          type: string
          format: ipv4
        createdAt:
          type: string
          format: timestamp
    SessionArray:
      type: array
      items:
        $ref: '#/components/schemas/Session'
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: id
      in: cookie
