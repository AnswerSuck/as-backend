---
openapi: 3.0.3
info:
  title: Answersuck backend API
  version: 0.1.0
servers:
- url: http://localhost:8080/v1
  description: Local server
tags:
- name: account
  description: Account operations
- name: player
  description: Player operations
- name: session
  description: Session operations
- name: auth
  description: Auth operations
- name: media
  description: Media operations
- name: tag
  description: Tag operations
- name: language
  description: Language operations
- name: topic
  description: Topic operations
- name: question
  description: Question operations
- name: answer
  description: Answer operations
- name: package
  description: Package operations
paths:
  /accounts:
    post:
      tags:
      - account
      summary: Create account
      description: This can only be done by providing email, username and password
      operationId: accountCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateRequest'
        required: true
      responses:
        "204":
          description: Account created.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "409":
          description: Account with given email or username already exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
    delete:
      tags:
      - account
      summary: Delete account
      description: Only account with state set to `isArchive=false` can be deleted. Security token should be provided at query param, request it at `/auth/token/`.
      operationId: accountDelete
      parameters:
      - name: token
        in: query
        description: Short live security token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Account deleted.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=; Path=v1; Max-Age=-1; HttpOnly; Secure
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /accounts/verification:
    put:
      tags:
      - account
      summary: Verify email
      description: To verify email, code as query parameter should be provided
      operationId: accountVerifyEmail
      parameters:
      - name: code
        in: query
        description: Verification code
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Email has been verified.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized or expired session.
        "403":
          description: Invalid or expired security token.
        "500":
          description: Internal Server Error.
    post:
      tags:
      - account
      summary: Request email verification
      description: Send email verification to email address linked to the account
      operationId: accountRequestVerification
      responses:
        "202":
          description: Email verification link sent.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized or expired session.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /accounts/password:
    put:
      tags:
      - account
      summary: Set new password
      description: To set new password, access token should be provided along side with new password
      operationId: accountPasswordSet
      parameters:
      - name: token
        in: query
        description: Password reset token
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordSetRequest'
        required: true
      responses:
        "204":
          description: New password set.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "403":
          description: Invalid or expired access token.
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
    post:
      tags:
      - account
      summary: Reset password
      description: To request link to password reset, email or username should be provided. Email with code will be sent on success.
      operationId: accountPasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      responses:
        "202":
          description: Email with link sent.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
  /players/{nickname}:
    get:
      tags:
      - player
      summary: Get player
      description: Returns player public data associated with account
      operationId: playerGet
      parameters:
      - name: nickname
        in: path
        description: player nickname
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        "401":
          description: Unauthorized.
        "500":
          description: Internal Server Error.
  /auth/login:
    post:
      tags:
      - auth
      summary: Login
      description: Creates new session and sets its id in cookies. Login might be email or nickname.
      operationId: sessionCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=XN6StCMLLT4Ijc1fGhZPj83PJ2gjHrPB; Path=v1; Max-Age=60; HttpOnly; Secure
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "401":
          description: Incorrect email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
  /auth/token:
    post:
      tags:
      - auth
      summary: Request security token
      description: Request short live token which can be used to perform protected operations. Each token can be accepted by only one resource. Resource URI example - `localhost:8080/api/sessions/:sessionId`
      operationId: authToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityTokenRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityTokenResponse'
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /auth/logout:
    post:
      tags:
      - auth
      summary: Logout
      description: Log out from current session
      operationId: authLogout
      responses:
        "204":
          description: Successful operation.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=; Path=v1; Max-Age=-1; HttpOnly; Secure
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /sessions:
    get:
      tags:
      - session
      summary: Get sessions
      operationId: sessionGetAll
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionArray'
        "401":
          description: Unauthorized.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
    delete:
      tags:
      - session
      summary: Terminate all sessions
      description: To terminate all account sessions, security token should be provided at query param, request it at `/tokens/security`
      operationId: sessionDeleteAll
      parameters:
      - name: token
        in: query
        description: Short live security token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful operation.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Invalid or expired security token.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /sessions/{sessionId}:
    delete:
      tags:
      - session
      summary: Terminate session
      operationId: sessionDelete
      parameters:
      - name: sessionId
        in: path
        description: String ID of the session to terminate
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: token
        in: query
        description: Short live security token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful operation.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized.
        "403":
          description: Invalid or expired security token.
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /media:
    post:
      tags:
      - media
      summary: Upload media
      operationId: mediaUpload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/media_body'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /tags:
    get:
      tags:
      - tag
      summary: Get tags
      operationId: tagGetAll
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
        "500":
          description: Internal Server Error.
  /languages:
    get:
      tags:
      - language
      summary: Get languages
      operationId: languageGetAll
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageArray'
        "500":
          description: Internal Server Error.
  /answers:
    post:
      tags:
      - answer
      summary: Create answer
      operationId: answerCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerCreateRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /questions:
    get:
      tags:
      - question
      summary: Get questions
      operationId: questionGetAll
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionMinimizedArray'
        "500":
          description: Internal Server Error.
    post:
      tags:
      - question
      summary: Create question
      operationId: questionCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /questions/{questionId}:
    get:
      tags:
      - question
      summary: Get question
      operationId: questionGet
      parameters:
      - name: questionId
        in: path
        description: Integer ID of the question
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDetailed'
        "404":
          description: Not Found.
        "500":
          description: Internal Server Error.
  /topics:
    get:
      tags:
      - topic
      summary: Get topics
      operationId: topicGetAll
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicArray'
        "500":
          description: Internal Server Error.
    post:
      tags:
      - topic
      summary: Create topic
      operationId: topicCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
  /packages:
    get:
      tags:
      - package
      summary: Get packages
      operationId: packageGetAll
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageArray'
        "500":
          description: Internal Server Error.
    post:
      tags:
      - package
      summary: Create package
      operationId: packageCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageCreateRequest'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageCreateResponse'
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error.
      security:
      - cookieAuth: []
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        detail:
          type: string
          example: ""
    ValidationError:
      type: object
      properties:
        error:
          type: string
        detail:
          $ref: '#/components/schemas/ValidationErrorDetail'
    ValidationErrorDetail:
      type: object
      properties:
        fieldName:
          type: string
    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nickname:
          type: string
        avatarUrl:
          type: string
          format: uri
    AccountCreateRequest:
      required:
      - email
      - nickname
      - password
      type: object
      properties:
        nickname:
          maxLength: 25
          minLength: 4
          type: string
        email:
          maxLength: 255
          type: string
          format: email
        password:
          maxLength: 71
          minLength: 8
          type: string
          format: password
    PasswordResetRequest:
      required:
      - login
      type: object
      properties:
        login:
          type: string
          format: email or username
    PasswordSetRequest:
      required:
      - password
      type: object
      properties:
        password:
          maxLength: 71
          minLength: 4
          type: string
          format: password
    Session:
      type: object
      properties:
        id:
          type: string
        userAgent:
          type: string
        ip:
          type: string
          format: ipv4
        createdAt:
          type: string
          format: timestamp
    SessionArray:
      type: array
      items:
        $ref: '#/components/schemas/Session'
    LoginRequest:
      required:
      - login
      - password
      type: object
      properties:
        login:
          type: string
          format: email or username
        password:
          type: string
          format: password
    SecurityTokenRequest:
      required:
      - audience
      - password
      type: object
      properties:
        audience:
          type: string
          format: uri
        password:
          type: string
          format: password
    SecurityTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token contains Account Id as subject and audience in payload
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        languageId:
          type: integer
    TagArray:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Language:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    LanguageArray:
      type: array
      items:
        $ref: '#/components/schemas/Language'
    Topic:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        languageId:
          type: integer
    TopicArray:
      type: array
      items:
        $ref: '#/components/schemas/Topic'
    TopicCreateRequest:
      required:
      - languageId
      - name
      type: object
      properties:
        name:
          type: string
        languageId:
          type: integer
    MimeType:
      type: string
      enum:
      - image/jpeg
      - image/png
      - audio/mp4
      - audio/aac
      - audio/mpeg
    Media:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        type:
          $ref: '#/components/schemas/MimeType'
    Answer:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        mediaId:
          type: string
          format: uuid
    AnswerCreateRequest:
      required:
      - text
      type: object
      properties:
        text:
          maximum: 100
          minimum: 1
          type: string
        mediaId:
          type: string
          format: uuid
    Question:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        answerId:
          type: integer
        accoundId:
          type: string
          format: uuid
        mediaId:
          type: string
          format: uuid
        languageId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    QuestionMinimized:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        languageId:
          type: integer
    QuestionDetailed:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        answer:
          type: string
        answerImageUrl:
          type: string
          format: uri
        author:
          type: string
        mediaUrl:
          type: string
          format: uri
        mediaType:
          $ref: '#/components/schemas/MimeType'
        languageId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    QuestionArray:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    QuestionMinimizedArray:
      type: array
      items:
        $ref: '#/components/schemas/QuestionMinimized'
    QuestionCreateRequest:
      required:
      - answerId
      - languageId
      - text
      type: object
      properties:
        text:
          maximum: 200
          minimum: 1
          type: string
        answerId:
          type: integer
        mediaId:
          type: string
          format: uuid
        languageId:
          type: integer
    QuestionType:
      type: string
      enum:
      - DEFAULT
      - BET
      - SECRET
      - SUPERSECRET
      - SAFE
    QuestionMedia:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          format: uri
        type:
          $ref: '#/components/schemas/MimeType'
    AnswerImage:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          format: uri
    Stage:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        final:
          type: boolean
          description: indicates that stage is final or not
        topics:
          type: array
          items:
            $ref: '#/components/schemas/StageTopic'
    StageTopic:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        languageId:
          type: integer
        questions:
          $ref: '#/components/schemas/QuestionArray'
    StageArray:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
    StageCreateRequest:
      required:
      - final
      - name
      - topics
      type: object
      properties:
        name:
          maximum: 32
          minimum: 6
          type: string
        final:
          type: boolean
        content:
          type: array
          items:
            $ref: '#/components/schemas/StageContentCreateRequest'
    StageContentCreateRequest:
      required:
      - cost
      - interval
      - questionId
      - topicId
      - type
      type: object
      properties:
        topicId:
          type: integer
        questionId:
          type: integer
        questionType:
          $ref: '#/components/schemas/QuestionType'
        cost:
          type: integer
        interval:
          type: integer
        comment:
          type: string
        secretTopic:
          type: string
          description: topic for SECRET or SUPERSECRET question
        secretCost:
          type: integer
          description: cost for SECRET or SUPERSECRET question
        keepable:
          type: boolean
          description: indicator of whether you can leave q to yourself
        visible:
          type: boolean
          description: indicator that topic and cost are visible to players or not
    Package:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        languageId:
          type: integer
        cover:
          type: string
          format: uri
        published:
          type: boolean
        stages:
          $ref: '#/components/schemas/StageArray'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PackageArray:
      type: array
      items:
        $ref: '#/components/schemas/Package'
    PackageCreateRequest:
      required:
      - languageId
      - name
      - stages
      type: object
      properties:
        name:
          type: string
        languageId:
          type: integer
        coverId:
          type: integer
        stages:
          type: array
          items:
            $ref: '#/components/schemas/StageCreateRequest'
    PackageCreateResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        languageId:
          type: integer
        coverUrl:
          type: string
          format: uri
        published:
          type: boolean
        stages:
          $ref: '#/components/schemas/StageArray'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PackageCover:
      type: object
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
          format: uri
    media_body:
      type: object
      properties:
        media:
          type: string
          format: binary
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: id
      in: cookie
