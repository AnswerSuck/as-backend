// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: player/v1/player_service.proto

package playerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePlayerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayerRequestMultiError, or nil if none found.
func (m *CreatePlayerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreatePlayerRequest_Nickname_Pattern.MatchString(m.GetNickname()) {
		err := CreatePlayerRequestValidationError{
			field:  "Nickname",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9][\\\\w]{3,24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) > 320 {
		err := CreatePlayerRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 320 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreatePlayerRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 10 || l > 128 {
		err := CreatePlayerRequestValidationError{
			field:  "Password",
			reason: "value length must be between 10 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePlayerRequestMultiError(errors)
	}

	return nil
}

func (m *CreatePlayerRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreatePlayerRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreatePlayerRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayerRequestMultiError) AllErrors() []error { return m }

// CreatePlayerRequestValidationError is the validation error returned by
// CreatePlayerRequest.Validate if the designated constraints aren't met.
type CreatePlayerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayerRequestValidationError) ErrorName() string {
	return "CreatePlayerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayerRequestValidationError{}

var _CreatePlayerRequest_Nickname_Pattern = regexp.MustCompile("^[a-zA-Z0-9][\\w]{3,24}$")

// Validate checks the field values on GetPlayerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayerRequestMultiError, or nil if none found.
func (m *GetPlayerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	if len(errors) > 0 {
		return GetPlayerRequestMultiError(errors)
	}

	return nil
}

// GetPlayerRequestMultiError is an error wrapping multiple validation errors
// returned by GetPlayerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPlayerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerRequestMultiError) AllErrors() []error { return m }

// GetPlayerRequestValidationError is the validation error returned by
// GetPlayerRequest.Validate if the designated constraints aren't met.
type GetPlayerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerRequestValidationError) ErrorName() string { return "GetPlayerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPlayerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerRequestValidationError{}

// Validate checks the field values on GetPlayerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayerResponseMultiError, or nil if none found.
func (m *GetPlayerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlayerResponseValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlayerResponseValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlayerResponseValidationError{
				field:  "Player",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPlayerResponseMultiError(errors)
	}

	return nil
}

// GetPlayerResponseMultiError is an error wrapping multiple validation errors
// returned by GetPlayerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPlayerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerResponseMultiError) AllErrors() []error { return m }

// GetPlayerResponseValidationError is the validation error returned by
// GetPlayerResponse.Validate if the designated constraints aren't met.
type GetPlayerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerResponseValidationError) ErrorName() string {
	return "GetPlayerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerResponseValidationError{}
