// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: package/v1/round.proto

package packagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoundRequestMultiError, or nil if none found.
func (m *CreateRoundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if l := utf8.RuneCountInString(m.GetRoundName()); l < 3 || l > 30 {
		err := CreateRoundRequestValidationError{
			field:  "RoundName",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoundPosition

	if len(errors) > 0 {
		return CreateRoundRequestMultiError(errors)
	}

	return nil
}

// CreateRoundRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoundRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoundRequestMultiError) AllErrors() []error { return m }

// CreateRoundRequestValidationError is the validation error returned by
// CreateRoundRequest.Validate if the designated constraints aren't met.
type CreateRoundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoundRequestValidationError) ErrorName() string {
	return "CreateRoundRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoundRequestValidationError{}

// Validate checks the field values on CreateRoundResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoundResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoundResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoundResponseMultiError, or nil if none found.
func (m *CreateRoundResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoundResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoundResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoundResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoundResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoundResponseMultiError(errors)
	}

	return nil
}

// CreateRoundResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRoundResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRoundResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoundResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoundResponseMultiError) AllErrors() []error { return m }

// CreateRoundResponseValidationError is the validation error returned by
// CreateRoundResponse.Validate if the designated constraints aren't met.
type CreateRoundResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoundResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoundResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoundResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoundResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoundResponseValidationError) ErrorName() string {
	return "CreateRoundResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoundResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoundResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoundResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoundResponseValidationError{}

// Validate checks the field values on UpdateRoundPositionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoundPositionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoundPositionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoundPositionRequestMultiError, or nil if none found.
func (m *UpdateRoundPositionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoundPositionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	// no validation rules for RoundPosition

	if len(errors) > 0 {
		return UpdateRoundPositionRequestMultiError(errors)
	}

	return nil
}

// UpdateRoundPositionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateRoundPositionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateRoundPositionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoundPositionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoundPositionRequestMultiError) AllErrors() []error { return m }

// UpdateRoundPositionRequestValidationError is the validation error returned
// by UpdateRoundPositionRequest.Validate if the designated constraints aren't met.
type UpdateRoundPositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoundPositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoundPositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoundPositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoundPositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoundPositionRequestValidationError) ErrorName() string {
	return "UpdateRoundPositionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoundPositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoundPositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoundPositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoundPositionRequestValidationError{}

// Validate checks the field values on ListRoundsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoundsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoundsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoundsRequestMultiError, or nil if none found.
func (m *ListRoundsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoundsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return ListRoundsRequestMultiError(errors)
	}

	return nil
}

// ListRoundsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoundsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoundsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoundsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoundsRequestMultiError) AllErrors() []error { return m }

// ListRoundsRequestValidationError is the validation error returned by
// ListRoundsRequest.Validate if the designated constraints aren't met.
type ListRoundsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoundsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoundsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoundsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoundsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoundsRequestValidationError) ErrorName() string {
	return "ListRoundsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoundsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoundsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoundsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoundsRequestValidationError{}

// Validate checks the field values on ListRoundsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoundsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoundsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoundsResponseMultiError, or nil if none found.
func (m *ListRoundsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoundsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRounds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoundsResponseValidationError{
						field:  fmt.Sprintf("Rounds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoundsResponseValidationError{
						field:  fmt.Sprintf("Rounds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoundsResponseValidationError{
					field:  fmt.Sprintf("Rounds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoundsResponseMultiError(errors)
	}

	return nil
}

// ListRoundsResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoundsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoundsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoundsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoundsResponseMultiError) AllErrors() []error { return m }

// ListRoundsResponseValidationError is the validation error returned by
// ListRoundsResponse.Validate if the designated constraints aren't met.
type ListRoundsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoundsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoundsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoundsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoundsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoundsResponseValidationError) ErrorName() string {
	return "ListRoundsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoundsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoundsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoundsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoundsResponseValidationError{}

// Validate checks the field values on AddTopicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTopicRequestMultiError, or nil if none found.
func (m *AddTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	// no validation rules for TopicId

	if len(errors) > 0 {
		return AddTopicRequestMultiError(errors)
	}

	return nil
}

// AddTopicRequestMultiError is an error wrapping multiple validation errors
// returned by AddTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTopicRequestMultiError) AllErrors() []error { return m }

// AddTopicRequestValidationError is the validation error returned by
// AddTopicRequest.Validate if the designated constraints aren't met.
type AddTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTopicRequestValidationError) ErrorName() string { return "AddTopicRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTopicRequestValidationError{}

// Validate checks the field values on RemoveTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTopicRequestMultiError, or nil if none found.
func (m *RemoveTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	// no validation rules for TopicId

	if len(errors) > 0 {
		return RemoveTopicRequestMultiError(errors)
	}

	return nil
}

// RemoveTopicRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTopicRequestMultiError) AllErrors() []error { return m }

// RemoveTopicRequestValidationError is the validation error returned by
// RemoveTopicRequest.Validate if the designated constraints aren't met.
type RemoveTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTopicRequestValidationError) ErrorName() string {
	return "RemoveTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTopicRequestValidationError{}

// Validate checks the field values on GetQuestionGridRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionGridRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionGridRequestMultiError, or nil if none found.
func (m *GetQuestionGridRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	if len(errors) > 0 {
		return GetQuestionGridRequestMultiError(errors)
	}

	return nil
}

// GetQuestionGridRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuestionGridRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionGridRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridRequestMultiError) AllErrors() []error { return m }

// GetQuestionGridRequestValidationError is the validation error returned by
// GetQuestionGridRequest.Validate if the designated constraints aren't met.
type GetQuestionGridRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridRequestValidationError) ErrorName() string {
	return "GetQuestionGridRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridRequestValidationError{}

// Validate checks the field values on GetQuestionGridResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionGridResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionGridResponseMultiError, or nil if none found.
func (m *GetQuestionGridResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionGridResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionGridResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionGridResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionGridResponseMultiError(errors)
	}

	return nil
}

// GetQuestionGridResponseMultiError is an error wrapping multiple validation
// errors returned by GetQuestionGridResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionGridResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridResponseMultiError) AllErrors() []error { return m }

// GetQuestionGridResponseValidationError is the validation error returned by
// GetQuestionGridResponse.Validate if the designated constraints aren't met.
type GetQuestionGridResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridResponseValidationError) ErrorName() string {
	return "GetQuestionGridResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridResponseValidationError{}

// Validate checks the field values on ListRoundsResponse_Round with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoundsResponse_Round) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoundsResponse_Round with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoundsResponse_RoundMultiError, or nil if none found.
func (m *ListRoundsResponse_Round) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoundsResponse_Round) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListRoundsResponse_RoundMultiError(errors)
	}

	return nil
}

// ListRoundsResponse_RoundMultiError is an error wrapping multiple validation
// errors returned by ListRoundsResponse_Round.ValidateAll() if the designated
// constraints aren't met.
type ListRoundsResponse_RoundMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoundsResponse_RoundMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoundsResponse_RoundMultiError) AllErrors() []error { return m }

// ListRoundsResponse_RoundValidationError is the validation error returned by
// ListRoundsResponse_Round.Validate if the designated constraints aren't met.
type ListRoundsResponse_RoundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoundsResponse_RoundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoundsResponse_RoundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoundsResponse_RoundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoundsResponse_RoundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoundsResponse_RoundValidationError) ErrorName() string {
	return "ListRoundsResponse_RoundValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoundsResponse_RoundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoundsResponse_Round.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoundsResponse_RoundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoundsResponse_RoundValidationError{}

// Validate checks the field values on GetQuestionGridResponse_Question with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetQuestionGridResponse_Question) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridResponse_Question with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetQuestionGridResponse_QuestionMultiError, or nil if none found.
func (m *GetQuestionGridResponse_Question) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridResponse_Question) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	// no validation rules for Type

	// no validation rules for Cost

	if len(errors) > 0 {
		return GetQuestionGridResponse_QuestionMultiError(errors)
	}

	return nil
}

// GetQuestionGridResponse_QuestionMultiError is an error wrapping multiple
// validation errors returned by
// GetQuestionGridResponse_Question.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionGridResponse_QuestionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridResponse_QuestionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridResponse_QuestionMultiError) AllErrors() []error { return m }

// GetQuestionGridResponse_QuestionValidationError is the validation error
// returned by GetQuestionGridResponse_Question.Validate if the designated
// constraints aren't met.
type GetQuestionGridResponse_QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridResponse_QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridResponse_QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridResponse_QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridResponse_QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridResponse_QuestionValidationError) ErrorName() string {
	return "GetQuestionGridResponse_QuestionValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridResponse_QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridResponse_Question.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridResponse_QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridResponse_QuestionValidationError{}

// Validate checks the field values on GetQuestionGridResponse_Topic with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionGridResponse_Topic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridResponse_Topic with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetQuestionGridResponse_TopicMultiError, or nil if none found.
func (m *GetQuestionGridResponse_Topic) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridResponse_Topic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionGridResponse_TopicValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionGridResponse_TopicValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionGridResponse_TopicValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionGridResponse_TopicMultiError(errors)
	}

	return nil
}

// GetQuestionGridResponse_TopicMultiError is an error wrapping multiple
// validation errors returned by GetQuestionGridResponse_Topic.ValidateAll()
// if the designated constraints aren't met.
type GetQuestionGridResponse_TopicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridResponse_TopicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridResponse_TopicMultiError) AllErrors() []error { return m }

// GetQuestionGridResponse_TopicValidationError is the validation error
// returned by GetQuestionGridResponse_Topic.Validate if the designated
// constraints aren't met.
type GetQuestionGridResponse_TopicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridResponse_TopicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridResponse_TopicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridResponse_TopicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridResponse_TopicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridResponse_TopicValidationError) ErrorName() string {
	return "GetQuestionGridResponse_TopicValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridResponse_TopicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridResponse_Topic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridResponse_TopicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridResponse_TopicValidationError{}
