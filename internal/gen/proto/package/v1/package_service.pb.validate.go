// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: package/v1/package_service.proto

package packagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetPackageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPackageRequestMultiError, or nil if none found.
func (m *GetPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return GetPackageRequestMultiError(errors)
	}

	return nil
}

// GetPackageRequestMultiError is an error wrapping multiple validation errors
// returned by GetPackageRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPackageRequestMultiError) AllErrors() []error { return m }

// GetPackageRequestValidationError is the validation error returned by
// GetPackageRequest.Validate if the designated constraints aren't met.
type GetPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageRequestValidationError) ErrorName() string {
	return "GetPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageRequestValidationError{}

// Validate checks the field values on GetPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPackageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPackageResponseMultiError, or nil if none found.
func (m *GetPackageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPackageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPackageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPackageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPackageResponseMultiError(errors)
	}

	return nil
}

// GetPackageResponseMultiError is an error wrapping multiple validation errors
// returned by GetPackageResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPackageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPackageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPackageResponseMultiError) AllErrors() []error { return m }

// GetPackageResponseValidationError is the validation error returned by
// GetPackageResponse.Validate if the designated constraints aren't met.
type GetPackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageResponseValidationError) ErrorName() string {
	return "GetPackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageResponseValidationError{}

// Validate checks the field values on CreatePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePackageRequestMultiError, or nil if none found.
func (m *CreatePackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPackageName()); l < 3 || l > 50 {
		err := CreatePackageRequestValidationError{
			field:  "PackageName",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverUrl()); err != nil {
		err = CreatePackageRequestValidationError{
			field:  "CoverUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreatePackageRequestValidationError{
			field:  "CoverUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 5 {
		err := CreatePackageRequestValidationError{
			field:  "Tags",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreatePackageRequest_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if _, exists := _CreatePackageRequest_Tags_Unique[item]; exists {
			err := CreatePackageRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreatePackageRequest_Tags_Unique[item] = struct{}{}
		}

		// no validation rules for Tags[idx]
	}

	if len(errors) > 0 {
		return CreatePackageRequestMultiError(errors)
	}

	return nil
}

// CreatePackageRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePackageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePackageRequestMultiError) AllErrors() []error { return m }

// CreatePackageRequestValidationError is the validation error returned by
// CreatePackageRequest.Validate if the designated constraints aren't met.
type CreatePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageRequestValidationError) ErrorName() string {
	return "CreatePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageRequestValidationError{}

// Validate checks the field values on CreatePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePackageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePackageResponseMultiError, or nil if none found.
func (m *CreatePackageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePackageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePackageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePackageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePackageResponseMultiError(errors)
	}

	return nil
}

// CreatePackageResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePackageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePackageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePackageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePackageResponseMultiError) AllErrors() []error { return m }

// CreatePackageResponseValidationError is the validation error returned by
// CreatePackageResponse.Validate if the designated constraints aren't met.
type CreatePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageResponseValidationError) ErrorName() string {
	return "CreatePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageResponseValidationError{}

// Validate checks the field values on PublishPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishPackageRequestMultiError, or nil if none found.
func (m *PublishPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return PublishPackageRequestMultiError(errors)
	}

	return nil
}

// PublishPackageRequestMultiError is an error wrapping multiple validation
// errors returned by PublishPackageRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishPackageRequestMultiError) AllErrors() []error { return m }

// PublishPackageRequestValidationError is the validation error returned by
// PublishPackageRequest.Validate if the designated constraints aren't met.
type PublishPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishPackageRequestValidationError) ErrorName() string {
	return "PublishPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishPackageRequestValidationError{}

// Validate checks the field values on PublishPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishPackageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishPackageResponseMultiError, or nil if none found.
func (m *PublishPackageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishPackageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishPackageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishPackageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishPackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishPackageResponseMultiError(errors)
	}

	return nil
}

// PublishPackageResponseMultiError is an error wrapping multiple validation
// errors returned by PublishPackageResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishPackageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishPackageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishPackageResponseMultiError) AllErrors() []error { return m }

// PublishPackageResponseValidationError is the validation error returned by
// PublishPackageResponse.Validate if the designated constraints aren't met.
type PublishPackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishPackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishPackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishPackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishPackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishPackageResponseValidationError) ErrorName() string {
	return "PublishPackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishPackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishPackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishPackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishPackageResponseValidationError{}
