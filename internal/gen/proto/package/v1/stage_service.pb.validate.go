// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: package/v1/stage_service.proto

package packagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStageRequestMultiError, or nil if none found.
func (m *CreateStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if l := utf8.RuneCountInString(m.GetStageName()); l < 3 || l > 30 {
		err := CreateStageRequestValidationError{
			field:  "StageName",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StageOrder

	if l := len(m.GetQuestionTopics()); l < 3 || l > 10 {
		err := CreateStageRequestValidationError{
			field:  "QuestionTopics",
			reason: "value must contain between 3 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetQuestionTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateStageRequestValidationError{
						field:  fmt.Sprintf("QuestionTopics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateStageRequestValidationError{
						field:  fmt.Sprintf("QuestionTopics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateStageRequestValidationError{
					field:  fmt.Sprintf("QuestionTopics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateStageRequestMultiError(errors)
	}

	return nil
}

// CreateStageRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStageRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStageRequestMultiError) AllErrors() []error { return m }

// CreateStageRequestValidationError is the validation error returned by
// CreateStageRequest.Validate if the designated constraints aren't met.
type CreateStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStageRequestValidationError) ErrorName() string {
	return "CreateStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStageRequestValidationError{}

// Validate checks the field values on CreateStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStageResponseMultiError, or nil if none found.
func (m *CreateStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStageResponseMultiError(errors)
	}

	return nil
}

// CreateStageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStageResponseMultiError) AllErrors() []error { return m }

// CreateStageResponseValidationError is the validation error returned by
// CreateStageResponse.Validate if the designated constraints aren't met.
type CreateStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStageResponseValidationError) ErrorName() string {
	return "CreateStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStageResponseValidationError{}

// Validate checks the field values on ListStageQuestionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStageQuestionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStageQuestionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStageQuestionsRequestMultiError, or nil if none found.
func (m *ListStageQuestionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStageQuestionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for StageId

	if len(errors) > 0 {
		return ListStageQuestionsRequestMultiError(errors)
	}

	return nil
}

// ListStageQuestionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListStageQuestionsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListStageQuestionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStageQuestionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStageQuestionsRequestMultiError) AllErrors() []error { return m }

// ListStageQuestionsRequestValidationError is the validation error returned by
// ListStageQuestionsRequest.Validate if the designated constraints aren't met.
type ListStageQuestionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStageQuestionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStageQuestionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStageQuestionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStageQuestionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStageQuestionsRequestValidationError) ErrorName() string {
	return "ListStageQuestionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStageQuestionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStageQuestionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStageQuestionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStageQuestionsRequestValidationError{}

// Validate checks the field values on ListStageQuestionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStageQuestionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStageQuestionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStageQuestionsResponseMultiError, or nil if none found.
func (m *ListStageQuestionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStageQuestionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StageName

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStageQuestionsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStageQuestionsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStageQuestionsResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStageQuestionsResponseMultiError(errors)
	}

	return nil
}

// ListStageQuestionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListStageQuestionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListStageQuestionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStageQuestionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStageQuestionsResponseMultiError) AllErrors() []error { return m }

// ListStageQuestionsResponseValidationError is the validation error returned
// by ListStageQuestionsResponse.Validate if the designated constraints aren't met.
type ListStageQuestionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStageQuestionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStageQuestionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStageQuestionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStageQuestionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStageQuestionsResponseValidationError) ErrorName() string {
	return "ListStageQuestionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStageQuestionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStageQuestionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStageQuestionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStageQuestionsResponseValidationError{}

// Validate checks the field values on ListStagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStagesRequestMultiError, or nil if none found.
func (m *ListStagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return ListStagesRequestMultiError(errors)
	}

	return nil
}

// ListStagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListStagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStagesRequestMultiError) AllErrors() []error { return m }

// ListStagesRequestValidationError is the validation error returned by
// ListStagesRequest.Validate if the designated constraints aren't met.
type ListStagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStagesRequestValidationError) ErrorName() string {
	return "ListStagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStagesRequestValidationError{}

// Validate checks the field values on ListStagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStagesResponseMultiError, or nil if none found.
func (m *ListStagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStagesResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStagesResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStagesResponseValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStagesResponseMultiError(errors)
	}

	return nil
}

// ListStagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListStagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListStagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStagesResponseMultiError) AllErrors() []error { return m }

// ListStagesResponseValidationError is the validation error returned by
// ListStagesResponse.Validate if the designated constraints aren't met.
type ListStagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStagesResponseValidationError) ErrorName() string {
	return "ListStagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStagesResponseValidationError{}

// Validate checks the field values on CreateStageRequest_QuestionTopic with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateStageRequest_QuestionTopic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStageRequest_QuestionTopic with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateStageRequest_QuestionTopicMultiError, or nil if none found.
func (m *CreateStageRequest_QuestionTopic) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStageRequest_QuestionTopic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 30 {
		err := CreateStageRequest_QuestionTopicValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetQuestionIds()); l < 1 || l > 10 {
		err := CreateStageRequest_QuestionTopicValidationError{
			field:  "QuestionIds",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateStageRequest_QuestionTopic_QuestionIds_Unique := make(map[int32]struct{}, len(m.GetQuestionIds()))

	for idx, item := range m.GetQuestionIds() {
		_, _ = idx, item

		if _, exists := _CreateStageRequest_QuestionTopic_QuestionIds_Unique[item]; exists {
			err := CreateStageRequest_QuestionTopicValidationError{
				field:  fmt.Sprintf("QuestionIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateStageRequest_QuestionTopic_QuestionIds_Unique[item] = struct{}{}
		}

		// no validation rules for QuestionIds[idx]
	}

	if len(errors) > 0 {
		return CreateStageRequest_QuestionTopicMultiError(errors)
	}

	return nil
}

// CreateStageRequest_QuestionTopicMultiError is an error wrapping multiple
// validation errors returned by
// CreateStageRequest_QuestionTopic.ValidateAll() if the designated
// constraints aren't met.
type CreateStageRequest_QuestionTopicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStageRequest_QuestionTopicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStageRequest_QuestionTopicMultiError) AllErrors() []error { return m }

// CreateStageRequest_QuestionTopicValidationError is the validation error
// returned by CreateStageRequest_QuestionTopic.Validate if the designated
// constraints aren't met.
type CreateStageRequest_QuestionTopicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStageRequest_QuestionTopicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStageRequest_QuestionTopicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStageRequest_QuestionTopicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStageRequest_QuestionTopicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStageRequest_QuestionTopicValidationError) ErrorName() string {
	return "CreateStageRequest_QuestionTopicValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStageRequest_QuestionTopicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStageRequest_QuestionTopic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStageRequest_QuestionTopicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStageRequest_QuestionTopicValidationError{}

// Validate checks the field values on ListStagesResponse_Stage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStagesResponse_Stage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStagesResponse_Stage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStagesResponse_StageMultiError, or nil if none found.
func (m *ListStagesResponse_Stage) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStagesResponse_Stage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListStagesResponse_StageMultiError(errors)
	}

	return nil
}

// ListStagesResponse_StageMultiError is an error wrapping multiple validation
// errors returned by ListStagesResponse_Stage.ValidateAll() if the designated
// constraints aren't met.
type ListStagesResponse_StageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStagesResponse_StageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStagesResponse_StageMultiError) AllErrors() []error { return m }

// ListStagesResponse_StageValidationError is the validation error returned by
// ListStagesResponse_Stage.Validate if the designated constraints aren't met.
type ListStagesResponse_StageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStagesResponse_StageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStagesResponse_StageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStagesResponse_StageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStagesResponse_StageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStagesResponse_StageValidationError) ErrorName() string {
	return "ListStagesResponse_StageValidationError"
}

// Error satisfies the builtin error interface
func (e ListStagesResponse_StageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStagesResponse_Stage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStagesResponse_StageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStagesResponse_StageValidationError{}
