// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: package/v1/stage.proto

package packagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStageRequestMultiError, or nil if none found.
func (m *CreateStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if l := utf8.RuneCountInString(m.GetStageName()); l < 3 || l > 30 {
		err := CreateStageRequestValidationError{
			field:  "StageName",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StagePosition

	if len(errors) > 0 {
		return CreateStageRequestMultiError(errors)
	}

	return nil
}

// CreateStageRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStageRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStageRequestMultiError) AllErrors() []error { return m }

// CreateStageRequestValidationError is the validation error returned by
// CreateStageRequest.Validate if the designated constraints aren't met.
type CreateStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStageRequestValidationError) ErrorName() string {
	return "CreateStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStageRequestValidationError{}

// Validate checks the field values on CreateStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStageResponseMultiError, or nil if none found.
func (m *CreateStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStageResponseValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStageResponseMultiError(errors)
	}

	return nil
}

// CreateStageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStageResponseMultiError) AllErrors() []error { return m }

// CreateStageResponseValidationError is the validation error returned by
// CreateStageResponse.Validate if the designated constraints aren't met.
type CreateStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStageResponseValidationError) ErrorName() string {
	return "CreateStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStageResponseValidationError{}

// Validate checks the field values on UpdateStagePositionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStagePositionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStagePositionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStagePositionRequestMultiError, or nil if none found.
func (m *UpdateStagePositionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStagePositionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StageId

	// no validation rules for StagePosition

	if len(errors) > 0 {
		return UpdateStagePositionRequestMultiError(errors)
	}

	return nil
}

// UpdateStagePositionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStagePositionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStagePositionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStagePositionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStagePositionRequestMultiError) AllErrors() []error { return m }

// UpdateStagePositionRequestValidationError is the validation error returned
// by UpdateStagePositionRequest.Validate if the designated constraints aren't met.
type UpdateStagePositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStagePositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStagePositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStagePositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStagePositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStagePositionRequestValidationError) ErrorName() string {
	return "UpdateStagePositionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStagePositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStagePositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStagePositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStagePositionRequestValidationError{}

// Validate checks the field values on ListStagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStagesRequestMultiError, or nil if none found.
func (m *ListStagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return ListStagesRequestMultiError(errors)
	}

	return nil
}

// ListStagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListStagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStagesRequestMultiError) AllErrors() []error { return m }

// ListStagesRequestValidationError is the validation error returned by
// ListStagesRequest.Validate if the designated constraints aren't met.
type ListStagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStagesRequestValidationError) ErrorName() string {
	return "ListStagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStagesRequestValidationError{}

// Validate checks the field values on ListStagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStagesResponseMultiError, or nil if none found.
func (m *ListStagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStagesResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStagesResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStagesResponseValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStagesResponseMultiError(errors)
	}

	return nil
}

// ListStagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListStagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListStagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStagesResponseMultiError) AllErrors() []error { return m }

// ListStagesResponseValidationError is the validation error returned by
// ListStagesResponse.Validate if the designated constraints aren't met.
type ListStagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStagesResponseValidationError) ErrorName() string {
	return "ListStagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStagesResponseValidationError{}

// Validate checks the field values on AddTopicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTopicRequestMultiError, or nil if none found.
func (m *AddTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StageId

	// no validation rules for TopicId

	if len(errors) > 0 {
		return AddTopicRequestMultiError(errors)
	}

	return nil
}

// AddTopicRequestMultiError is an error wrapping multiple validation errors
// returned by AddTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTopicRequestMultiError) AllErrors() []error { return m }

// AddTopicRequestValidationError is the validation error returned by
// AddTopicRequest.Validate if the designated constraints aren't met.
type AddTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTopicRequestValidationError) ErrorName() string { return "AddTopicRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTopicRequestValidationError{}

// Validate checks the field values on RemoveTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTopicRequestMultiError, or nil if none found.
func (m *RemoveTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StageId

	// no validation rules for TopicId

	if len(errors) > 0 {
		return RemoveTopicRequestMultiError(errors)
	}

	return nil
}

// RemoveTopicRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTopicRequestMultiError) AllErrors() []error { return m }

// RemoveTopicRequestValidationError is the validation error returned by
// RemoveTopicRequest.Validate if the designated constraints aren't met.
type RemoveTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTopicRequestValidationError) ErrorName() string {
	return "RemoveTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTopicRequestValidationError{}

// Validate checks the field values on GetQuestionGridRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionGridRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionGridRequestMultiError, or nil if none found.
func (m *GetQuestionGridRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StageId

	if len(errors) > 0 {
		return GetQuestionGridRequestMultiError(errors)
	}

	return nil
}

// GetQuestionGridRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuestionGridRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionGridRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridRequestMultiError) AllErrors() []error { return m }

// GetQuestionGridRequestValidationError is the validation error returned by
// GetQuestionGridRequest.Validate if the designated constraints aren't met.
type GetQuestionGridRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridRequestValidationError) ErrorName() string {
	return "GetQuestionGridRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridRequestValidationError{}

// Validate checks the field values on GetQuestionGridResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionGridResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionGridResponseMultiError, or nil if none found.
func (m *GetQuestionGridResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionGridResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionGridResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionGridResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionGridResponseMultiError(errors)
	}

	return nil
}

// GetQuestionGridResponseMultiError is an error wrapping multiple validation
// errors returned by GetQuestionGridResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionGridResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridResponseMultiError) AllErrors() []error { return m }

// GetQuestionGridResponseValidationError is the validation error returned by
// GetQuestionGridResponse.Validate if the designated constraints aren't met.
type GetQuestionGridResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridResponseValidationError) ErrorName() string {
	return "GetQuestionGridResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridResponseValidationError{}

// Validate checks the field values on ListStagesResponse_Stage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStagesResponse_Stage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStagesResponse_Stage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStagesResponse_StageMultiError, or nil if none found.
func (m *ListStagesResponse_Stage) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStagesResponse_Stage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListStagesResponse_StageMultiError(errors)
	}

	return nil
}

// ListStagesResponse_StageMultiError is an error wrapping multiple validation
// errors returned by ListStagesResponse_Stage.ValidateAll() if the designated
// constraints aren't met.
type ListStagesResponse_StageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStagesResponse_StageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStagesResponse_StageMultiError) AllErrors() []error { return m }

// ListStagesResponse_StageValidationError is the validation error returned by
// ListStagesResponse_Stage.Validate if the designated constraints aren't met.
type ListStagesResponse_StageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStagesResponse_StageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStagesResponse_StageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStagesResponse_StageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStagesResponse_StageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStagesResponse_StageValidationError) ErrorName() string {
	return "ListStagesResponse_StageValidationError"
}

// Error satisfies the builtin error interface
func (e ListStagesResponse_StageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStagesResponse_Stage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStagesResponse_StageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStagesResponse_StageValidationError{}

// Validate checks the field values on GetQuestionGridResponse_Question with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetQuestionGridResponse_Question) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridResponse_Question with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetQuestionGridResponse_QuestionMultiError, or nil if none found.
func (m *GetQuestionGridResponse_Question) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridResponse_Question) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	// no validation rules for Type

	// no validation rules for Cost

	if len(errors) > 0 {
		return GetQuestionGridResponse_QuestionMultiError(errors)
	}

	return nil
}

// GetQuestionGridResponse_QuestionMultiError is an error wrapping multiple
// validation errors returned by
// GetQuestionGridResponse_Question.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionGridResponse_QuestionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridResponse_QuestionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridResponse_QuestionMultiError) AllErrors() []error { return m }

// GetQuestionGridResponse_QuestionValidationError is the validation error
// returned by GetQuestionGridResponse_Question.Validate if the designated
// constraints aren't met.
type GetQuestionGridResponse_QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridResponse_QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridResponse_QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridResponse_QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridResponse_QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridResponse_QuestionValidationError) ErrorName() string {
	return "GetQuestionGridResponse_QuestionValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridResponse_QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridResponse_Question.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridResponse_QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridResponse_QuestionValidationError{}

// Validate checks the field values on GetQuestionGridResponse_Topic with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionGridResponse_Topic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionGridResponse_Topic with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetQuestionGridResponse_TopicMultiError, or nil if none found.
func (m *GetQuestionGridResponse_Topic) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionGridResponse_Topic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionGridResponse_TopicValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionGridResponse_TopicValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionGridResponse_TopicValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionGridResponse_TopicMultiError(errors)
	}

	return nil
}

// GetQuestionGridResponse_TopicMultiError is an error wrapping multiple
// validation errors returned by GetQuestionGridResponse_Topic.ValidateAll()
// if the designated constraints aren't met.
type GetQuestionGridResponse_TopicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionGridResponse_TopicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionGridResponse_TopicMultiError) AllErrors() []error { return m }

// GetQuestionGridResponse_TopicValidationError is the validation error
// returned by GetQuestionGridResponse_Topic.Validate if the designated
// constraints aren't met.
type GetQuestionGridResponse_TopicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionGridResponse_TopicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionGridResponse_TopicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionGridResponse_TopicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionGridResponse_TopicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionGridResponse_TopicValidationError) ErrorName() string {
	return "GetQuestionGridResponse_TopicValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionGridResponse_TopicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionGridResponse_Topic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionGridResponse_TopicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionGridResponse_TopicValidationError{}
