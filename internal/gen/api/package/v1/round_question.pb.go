// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: package/v1/round_question.proto

package packagev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	TransferType_BEFORE                    TransferType = 1
	TransferType_AFTER                     TransferType = 2
	TransferType_NEVER                     TransferType = 3
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "BEFORE",
		2: "AFTER",
		3: "NEVER",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED": 0,
		"BEFORE":                    1,
		"AFTER":                     2,
		"NEVER":                     3,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_package_v1_round_question_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_package_v1_round_question_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{0}
}

type RoundQuestionType int32

const (
	RoundQuestionType_ROUND_QUESTION_TYPE_UNSPECIFIED RoundQuestionType = 0
	RoundQuestionType_STANDARD                        RoundQuestionType = 1
	RoundQuestionType_SAFE                            RoundQuestionType = 2
	RoundQuestionType_SECRET                          RoundQuestionType = 3
	RoundQuestionType_SUPER_SECRET                    RoundQuestionType = 4
	RoundQuestionType_AUCTION                         RoundQuestionType = 5
)

// Enum value maps for RoundQuestionType.
var (
	RoundQuestionType_name = map[int32]string{
		0: "ROUND_QUESTION_TYPE_UNSPECIFIED",
		1: "STANDARD",
		2: "SAFE",
		3: "SECRET",
		4: "SUPER_SECRET",
		5: "AUCTION",
	}
	RoundQuestionType_value = map[string]int32{
		"ROUND_QUESTION_TYPE_UNSPECIFIED": 0,
		"STANDARD":                        1,
		"SAFE":                            2,
		"SECRET":                          3,
		"SUPER_SECRET":                    4,
		"AUCTION":                         5,
	}
)

func (x RoundQuestionType) Enum() *RoundQuestionType {
	p := new(RoundQuestionType)
	*p = x
	return p
}

func (x RoundQuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundQuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_package_v1_round_question_proto_enumTypes[1].Descriptor()
}

func (RoundQuestionType) Type() protoreflect.EnumType {
	return &file_package_v1_round_question_proto_enumTypes[1]
}

func (x RoundQuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundQuestionType.Descriptor instead.
func (RoundQuestionType) EnumDescriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{1}
}

type RoundQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoundId      int32                   `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	TopicId      int32                   `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Question     *RoundQuestion_Question `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	QuestionType RoundQuestionType       `protobuf:"varint,5,opt,name=question_type,json=questionType,proto3,enum=package.v1.RoundQuestionType" json:"question_type,omitempty"`
	QuestionCost int32                   `protobuf:"varint,6,opt,name=question_cost,json=questionCost,proto3" json:"question_cost,omitempty"`
	Answer       *RoundQuestion_Answer   `protobuf:"bytes,7,opt,name=answer,proto3" json:"answer,omitempty"`
	AnswerTime   int32                   `protobuf:"varint,8,opt,name=answer_time,json=answerTime,proto3" json:"answer_time,omitempty"`
	HostComment  string                  `protobuf:"bytes,9,opt,name=host_comment,json=hostComment,proto3" json:"host_comment,omitempty"`
	SecretTopic  string                  `protobuf:"bytes,10,opt,name=secret_topic,json=secretTopic,proto3" json:"secret_topic,omitempty"`
	SecretCost   int32                   `protobuf:"varint,11,opt,name=secret_cost,json=secretCost,proto3" json:"secret_cost,omitempty"`
	TransferType TransferType            `protobuf:"varint,12,opt,name=transfer_type,json=transferType,proto3,enum=package.v1.TransferType" json:"transfer_type,omitempty"`
	IsKeepable   bool                    `protobuf:"varint,13,opt,name=is_keepable,json=isKeepable,proto3" json:"is_keepable,omitempty"`
}

func (x *RoundQuestion) Reset() {
	*x = RoundQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundQuestion) ProtoMessage() {}

func (x *RoundQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundQuestion.ProtoReflect.Descriptor instead.
func (*RoundQuestion) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{0}
}

func (x *RoundQuestion) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoundQuestion) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundQuestion) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *RoundQuestion) GetQuestion() *RoundQuestion_Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *RoundQuestion) GetQuestionType() RoundQuestionType {
	if x != nil {
		return x.QuestionType
	}
	return RoundQuestionType_ROUND_QUESTION_TYPE_UNSPECIFIED
}

func (x *RoundQuestion) GetQuestionCost() int32 {
	if x != nil {
		return x.QuestionCost
	}
	return 0
}

func (x *RoundQuestion) GetAnswer() *RoundQuestion_Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *RoundQuestion) GetAnswerTime() int32 {
	if x != nil {
		return x.AnswerTime
	}
	return 0
}

func (x *RoundQuestion) GetHostComment() string {
	if x != nil {
		return x.HostComment
	}
	return ""
}

func (x *RoundQuestion) GetSecretTopic() string {
	if x != nil {
		return x.SecretTopic
	}
	return ""
}

func (x *RoundQuestion) GetSecretCost() int32 {
	if x != nil {
		return x.SecretCost
	}
	return 0
}

func (x *RoundQuestion) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *RoundQuestion) GetIsKeepable() bool {
	if x != nil {
		return x.IsKeepable
	}
	return false
}

type CreateRoundQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId   int32             `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`                                         // required
	TopicId      int32             `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                                                  // required
	RoundId      int32             `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                  // required
	QuestionType RoundQuestionType `protobuf:"varint,4,opt,name=question_type,json=questionType,proto3,enum=package.v1.RoundQuestionType" json:"question_type,omitempty"` // required
	QuestionCost int32             `protobuf:"varint,5,opt,name=question_cost,json=questionCost,proto3" json:"question_cost,omitempty"`                                   // required
	AnswerTime   int32             `protobuf:"varint,6,opt,name=answer_time,json=answerTime,proto3" json:"answer_time,omitempty"`                                         // required
	HostComment  string            `protobuf:"bytes,7,opt,name=host_comment,json=hostComment,proto3" json:"host_comment,omitempty"`
	SecretTopic  string            `protobuf:"bytes,8,opt,name=secret_topic,json=secretTopic,proto3" json:"secret_topic,omitempty"`
	SecretCost   int32             `protobuf:"varint,9,opt,name=secret_cost,json=secretCost,proto3" json:"secret_cost,omitempty"`
	IsKeepable   bool              `protobuf:"varint,10,opt,name=is_keepable,json=isKeepable,proto3" json:"is_keepable,omitempty"`
	TransferType TransferType      `protobuf:"varint,11,opt,name=transfer_type,json=transferType,proto3,enum=package.v1.TransferType" json:"transfer_type,omitempty"`
}

func (x *CreateRoundQuestionRequest) Reset() {
	*x = CreateRoundQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoundQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoundQuestionRequest) ProtoMessage() {}

func (x *CreateRoundQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoundQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateRoundQuestionRequest) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRoundQuestionRequest) GetQuestionId() int32 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *CreateRoundQuestionRequest) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *CreateRoundQuestionRequest) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *CreateRoundQuestionRequest) GetQuestionType() RoundQuestionType {
	if x != nil {
		return x.QuestionType
	}
	return RoundQuestionType_ROUND_QUESTION_TYPE_UNSPECIFIED
}

func (x *CreateRoundQuestionRequest) GetQuestionCost() int32 {
	if x != nil {
		return x.QuestionCost
	}
	return 0
}

func (x *CreateRoundQuestionRequest) GetAnswerTime() int32 {
	if x != nil {
		return x.AnswerTime
	}
	return 0
}

func (x *CreateRoundQuestionRequest) GetHostComment() string {
	if x != nil {
		return x.HostComment
	}
	return ""
}

func (x *CreateRoundQuestionRequest) GetSecretTopic() string {
	if x != nil {
		return x.SecretTopic
	}
	return ""
}

func (x *CreateRoundQuestionRequest) GetSecretCost() int32 {
	if x != nil {
		return x.SecretCost
	}
	return 0
}

func (x *CreateRoundQuestionRequest) GetIsKeepable() bool {
	if x != nil {
		return x.IsKeepable
	}
	return false
}

func (x *CreateRoundQuestionRequest) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

type CreateRoundQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundQuestion *RoundQuestion `protobuf:"bytes,1,opt,name=round_question,json=roundQuestion,proto3" json:"round_question,omitempty"`
}

func (x *CreateRoundQuestionResponse) Reset() {
	*x = CreateRoundQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoundQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoundQuestionResponse) ProtoMessage() {}

func (x *CreateRoundQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoundQuestionResponse.ProtoReflect.Descriptor instead.
func (*CreateRoundQuestionResponse) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRoundQuestionResponse) GetRoundQuestion() *RoundQuestion {
	if x != nil {
		return x.RoundQuestion
	}
	return nil
}

type GetRoundQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundQuestionId int32 `protobuf:"varint,1,opt,name=round_question_id,json=roundQuestionId,proto3" json:"round_question_id,omitempty"` // required
}

func (x *GetRoundQuestionRequest) Reset() {
	*x = GetRoundQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundQuestionRequest) ProtoMessage() {}

func (x *GetRoundQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetRoundQuestionRequest) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{3}
}

func (x *GetRoundQuestionRequest) GetRoundQuestionId() int32 {
	if x != nil {
		return x.RoundQuestionId
	}
	return 0
}

type GetRoundQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundQuestion *RoundQuestion `protobuf:"bytes,1,opt,name=round_question,json=roundQuestion,proto3" json:"round_question,omitempty"`
}

func (x *GetRoundQuestionResponse) Reset() {
	*x = GetRoundQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundQuestionResponse) ProtoMessage() {}

func (x *GetRoundQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundQuestionResponse.ProtoReflect.Descriptor instead.
func (*GetRoundQuestionResponse) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{4}
}

func (x *GetRoundQuestionResponse) GetRoundQuestion() *RoundQuestion {
	if x != nil {
		return x.RoundQuestion
	}
	return nil
}

type UpdateRoundQuestionsCostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId   int32                                       `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"` // required
	Questions []*UpdateRoundQuestionsCostRequest_Question `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`             // required
}

func (x *UpdateRoundQuestionsCostRequest) Reset() {
	*x = UpdateRoundQuestionsCostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoundQuestionsCostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoundQuestionsCostRequest) ProtoMessage() {}

func (x *UpdateRoundQuestionsCostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoundQuestionsCostRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoundQuestionsCostRequest) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRoundQuestionsCostRequest) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *UpdateRoundQuestionsCostRequest) GetQuestions() []*UpdateRoundQuestionsCostRequest_Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type RoundQuestion_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text       string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Author     string                 `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	MediaUrl   string                 `protobuf:"bytes,4,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *RoundQuestion_Question) Reset() {
	*x = RoundQuestion_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundQuestion_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundQuestion_Question) ProtoMessage() {}

func (x *RoundQuestion_Question) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundQuestion_Question.ProtoReflect.Descriptor instead.
func (*RoundQuestion_Question) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RoundQuestion_Question) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoundQuestion_Question) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RoundQuestion_Question) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RoundQuestion_Question) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *RoundQuestion_Question) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type RoundQuestion_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text       string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Author     string                 `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	MediaUrl   string                 `protobuf:"bytes,4,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *RoundQuestion_Answer) Reset() {
	*x = RoundQuestion_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundQuestion_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundQuestion_Answer) ProtoMessage() {}

func (x *RoundQuestion_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundQuestion_Answer.ProtoReflect.Descriptor instead.
func (*RoundQuestion_Answer) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RoundQuestion_Answer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoundQuestion_Answer) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RoundQuestion_Answer) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RoundQuestion_Answer) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *RoundQuestion_Answer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UpdateRoundQuestionsCostRequest_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundQuestionId int32 `protobuf:"varint,1,opt,name=round_question_id,json=roundQuestionId,proto3" json:"round_question_id,omitempty"` // required
	Cost            int32 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`                                                // required
}

func (x *UpdateRoundQuestionsCostRequest_Question) Reset() {
	*x = UpdateRoundQuestionsCostRequest_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_package_v1_round_question_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoundQuestionsCostRequest_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoundQuestionsCostRequest_Question) ProtoMessage() {}

func (x *UpdateRoundQuestionsCostRequest_Question) ProtoReflect() protoreflect.Message {
	mi := &file_package_v1_round_question_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoundQuestionsCostRequest_Question.ProtoReflect.Descriptor instead.
func (*UpdateRoundQuestionsCostRequest_Question) Descriptor() ([]byte, []int) {
	return file_package_v1_round_question_proto_rawDescGZIP(), []int{5, 0}
}

func (x *UpdateRoundQuestionsCostRequest_Question) GetRoundQuestionId() int32 {
	if x != nil {
		return x.RoundQuestionId
	}
	return 0
}

func (x *UpdateRoundQuestionsCostRequest_Question) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

var File_package_v1_round_question_proto protoreflect.FileDescriptor

var file_package_v1_round_question_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x06, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4b,
	0x65, 0x65, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf8, 0x03, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x82, 0x01, 0x0a, 0x18,
	0x01, 0x18, 0x02, 0x18, 0x03, 0x18, 0x04, 0x18, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a,
	0x04, 0x18, 0x3c, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82,
	0x01, 0x06, 0x18, 0x01, 0x18, 0x02, 0x18, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5c,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4a, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x2a, 0x4f, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x7b, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x46, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x32, 0xbe, 0x02, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x16, 0x5a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_package_v1_round_question_proto_rawDescOnce sync.Once
	file_package_v1_round_question_proto_rawDescData = file_package_v1_round_question_proto_rawDesc
)

func file_package_v1_round_question_proto_rawDescGZIP() []byte {
	file_package_v1_round_question_proto_rawDescOnce.Do(func() {
		file_package_v1_round_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_package_v1_round_question_proto_rawDescData)
	})
	return file_package_v1_round_question_proto_rawDescData
}

var file_package_v1_round_question_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_package_v1_round_question_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_package_v1_round_question_proto_goTypes = []interface{}{
	(TransferType)(0),                                // 0: package.v1.TransferType
	(RoundQuestionType)(0),                           // 1: package.v1.RoundQuestionType
	(*RoundQuestion)(nil),                            // 2: package.v1.RoundQuestion
	(*CreateRoundQuestionRequest)(nil),               // 3: package.v1.CreateRoundQuestionRequest
	(*CreateRoundQuestionResponse)(nil),              // 4: package.v1.CreateRoundQuestionResponse
	(*GetRoundQuestionRequest)(nil),                  // 5: package.v1.GetRoundQuestionRequest
	(*GetRoundQuestionResponse)(nil),                 // 6: package.v1.GetRoundQuestionResponse
	(*UpdateRoundQuestionsCostRequest)(nil),          // 7: package.v1.UpdateRoundQuestionsCostRequest
	(*RoundQuestion_Question)(nil),                   // 8: package.v1.RoundQuestion.Question
	(*RoundQuestion_Answer)(nil),                     // 9: package.v1.RoundQuestion.Answer
	(*UpdateRoundQuestionsCostRequest_Question)(nil), // 10: package.v1.UpdateRoundQuestionsCostRequest.Question
	(*timestamppb.Timestamp)(nil),                    // 11: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                            // 12: google.protobuf.Empty
}
var file_package_v1_round_question_proto_depIdxs = []int32{
	8,  // 0: package.v1.RoundQuestion.question:type_name -> package.v1.RoundQuestion.Question
	1,  // 1: package.v1.RoundQuestion.question_type:type_name -> package.v1.RoundQuestionType
	9,  // 2: package.v1.RoundQuestion.answer:type_name -> package.v1.RoundQuestion.Answer
	0,  // 3: package.v1.RoundQuestion.transfer_type:type_name -> package.v1.TransferType
	1,  // 4: package.v1.CreateRoundQuestionRequest.question_type:type_name -> package.v1.RoundQuestionType
	0,  // 5: package.v1.CreateRoundQuestionRequest.transfer_type:type_name -> package.v1.TransferType
	2,  // 6: package.v1.CreateRoundQuestionResponse.round_question:type_name -> package.v1.RoundQuestion
	2,  // 7: package.v1.GetRoundQuestionResponse.round_question:type_name -> package.v1.RoundQuestion
	10, // 8: package.v1.UpdateRoundQuestionsCostRequest.questions:type_name -> package.v1.UpdateRoundQuestionsCostRequest.Question
	11, // 9: package.v1.RoundQuestion.Question.create_time:type_name -> google.protobuf.Timestamp
	11, // 10: package.v1.RoundQuestion.Answer.create_time:type_name -> google.protobuf.Timestamp
	3,  // 11: package.v1.RoundQuestionService.CreateRoundQuestion:input_type -> package.v1.CreateRoundQuestionRequest
	5,  // 12: package.v1.RoundQuestionService.GetRoundQuestion:input_type -> package.v1.GetRoundQuestionRequest
	7,  // 13: package.v1.RoundQuestionService.UpdateRoundQuestionsCost:input_type -> package.v1.UpdateRoundQuestionsCostRequest
	4,  // 14: package.v1.RoundQuestionService.CreateRoundQuestion:output_type -> package.v1.CreateRoundQuestionResponse
	6,  // 15: package.v1.RoundQuestionService.GetRoundQuestion:output_type -> package.v1.GetRoundQuestionResponse
	12, // 16: package.v1.RoundQuestionService.UpdateRoundQuestionsCost:output_type -> google.protobuf.Empty
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_package_v1_round_question_proto_init() }
func file_package_v1_round_question_proto_init() {
	if File_package_v1_round_question_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_package_v1_round_question_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoundQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoundQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoundQuestionsCostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundQuestion_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundQuestion_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_package_v1_round_question_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoundQuestionsCostRequest_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_package_v1_round_question_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_package_v1_round_question_proto_goTypes,
		DependencyIndexes: file_package_v1_round_question_proto_depIdxs,
		EnumInfos:         file_package_v1_round_question_proto_enumTypes,
		MessageInfos:      file_package_v1_round_question_proto_msgTypes,
	}.Build()
	File_package_v1_round_question_proto = out.File
	file_package_v1_round_question_proto_rawDesc = nil
	file_package_v1_round_question_proto_goTypes = nil
	file_package_v1_round_question_proto_depIdxs = nil
}
