---
openapi: 3.0.3
info:
  title: Answersuck backend API
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
    description: Local server
tags:
  - name: account
    description: Account operations
  - name: session
    description: Session operations
  - name: auth
    description: Auth operations
  - name: media
    description: Media operations
  - name: language
    description: Language operations
  - name: tag
    description: Tag operations
  - name: answer
    description: Answer operations
paths:
  /accounts:
    post:
      tags:
        - account
      summary: Create account
      operationId: account_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountCreateRequest"
        required: true
      responses:
        "204":
          description: Account created.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Account with given email or username already exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
    delete:
      tags:
        - account
      summary: Delete account
      description: Only account with state set to `isArchive=false` can be deleted. Security token should be provided at query param, request it at `/auth/token/`.
      operationId: account_delete
      parameters:
        - name: token
          in: query
          description: Short live security token
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Account deleted.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=; Path=v1; Max-Age=-1; HttpOnly; Secure
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /accounts/verification:
    put:
      tags:
        - account
      summary: Verify email
      description: To verify email, code as query parameter should be provided
      operationId: account_verify_email
      parameters:
        - name: code
          in: query
          description: Verification code
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "204":
          description: Email has been verified.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized or expired session.
        "403":
          description: Invalid or expired security token.
        "500":
          description: Internal Server Error.
    post:
      tags:
        - account
      summary: Request email verification
      description: Send email verification to email address linked to the account
      operationId: account_request_verification
      responses:
        "202":
          description: Email verification link sent.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized or expired session.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /accounts/password:
    put:
      tags:
        - account
      summary: Set new password
      description: To set new password, password reset token should be provided along side with new password
      operationId: account_password_set
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordSetRequest"
        required: true
      responses:
        "204":
          description: New password set.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "403":
          description: Invalid or expired access token.
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
    post:
      tags:
        - account
      summary: Reset password
      description: To request link to password reset, email or username should be provided. Email with code will be sent on success.
      operationId: account_password_reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
        required: true
      responses:
        "202":
          description: Email with link sent.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
    patch:
      tags:
        - account
      summary: Update password
      description: To update password old one should be provided
      operationId: account_password_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordUpdateRequest"
        required: true
      responses:
        "204":
          description: Password updated.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized.
        "403":
          description: Invalid old password.
        "404":
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /sessions:
    get:
      tags:
        - session
      summary: Get sessions
      operationId: session_get_all
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionListResponse"
        "401":
          description: Unauthorized.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
    delete:
      tags:
        - session
      summary: Terminate all sessions
      description: To terminate all account sessions, security token should be provided in query param, request it at `/auth/token`
      operationId: session_delete_all
      parameters:
        - name: token
          in: query
          description: Short live security token
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Invalid or expired security token.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /sessions/{sessionId}:
    delete:
      tags:
        - session
      summary: Terminate session
      operationId: session_delete
      parameters:
        - name: sessionId
          in: path
          description: String ID of the session to terminate
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: query
          description: Short live security token
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
        "403":
          description: Invalid or expired security token.
        "404":
          description: Session not found.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Creates new session and sets its id in cookies. Login might be email or nickname.
      operationId: auth_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: Successful operation.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=XN6StCMLLT4Ijc1fGhZPj83PJ2gjHrPB; Path=v1; Max-Age=60; HttpOnly; Secure
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Incorrect email or password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
  /auth/token:
    post:
      tags:
        - auth
      summary: Request security token
      description: Request short live token which can be used to perform protected operations.
      operationId: auth_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityTokenRequest"
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityTokenResponse"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      description: Log out from current session
      operationId: auth_logout
      responses:
        "200":
          description: Successful operation.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: id=; Path=v1; Max-Age=-1; HttpOnly; Secure
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /media:
    post:
      tags:
        - media
      summary: Upload media
      operationId: media_upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MediaUploadRequest"
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "413":
          description: Media File Too Large.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /languages:
    get:
      tags:
        - language
      summary: Get languages
      operationId: language_get_all
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageListResponse"
        "500":
          description: Internal Server Error.
  /tags:
    post:
      tags:
        - tag
      summary: Create tags
      description: To perform this operation account must be verified.
      operationId: tag_create_multiple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagBulkCreateRequest"
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagListResponse"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized.
        "403":
          description: Account not verified.
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /tags/list:
    post:
      tags:
        - tag
      summary: Get tag list
      operationId: tag_get_list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagListRequest"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagListResponse"
        "500":
          description: Internal Server Error.
  /answers:
    post:
      tags:
        - answer
      summary: Create answer
      operationId: answer_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerCreateRequest"
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
      security:
        - cookieAuth: []
  /answers/list:
    post:
      tags:
        - answer
      summary: Get answer list
      operationId: answer_get_list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerListRequest"
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerListRequest"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
    ValidationError:
      type: object
      properties:
        message:
          type: string
        detail:
          $ref: "#/components/schemas/ValidationDetail"
    ValidationDetail:
      type: object
      properties:
        field_name:
          type: string
    AccountCreateRequest:
      required:
        - email
        - nickname
        - password
      type: object
      properties:
        nickname:
          maxLength: 25
          minLength: 4
          type: string
        email:
          maxLength: 255
          type: string
          format: email
        password:
          maxLength: 128
          minLength: 10
          type: string
          format: password
    PasswordResetRequest:
      required:
        - login
      type: object
      properties:
        login:
          type: string
          format: email or username
    PasswordSetRequest:
      required:
        - password
        - token
      type: object
      properties:
        token:
          maxLength: 64
          minLength: 64
          type: string
        password:
          maxLength: 128
          minLength: 10
          type: string
          format: password
    PasswordUpdateRequest:
      required:
        - new_password
        - old_password
      type: object
      properties:
        old_password:
          type: string
          format: password
        new_password:
          maxLength: 128
          minLength: 10
          type: string
          format: password
    Session:
      type: object
      properties:
        id:
          type: string
        user_agent:
          type: string
        ip:
          type: string
          format: ipv4
        created_at:
          type: string
          format: timestamp
    SessionArray:
      type: array
      items:
        $ref: "#/components/schemas/Session"
    SessionListResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/SessionArray"
    LoginRequest:
      required:
        - login
        - password
      type: object
      properties:
        login:
          type: string
          description: email or username
        password:
          type: string
          format: password
    SecurityTokenRequest:
      required:
        - password
      type: object
      properties:
        password:
          type: string
          format: password
    SecurityTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token contains Account Id as subject and audience in payload
    MediaType:
      type: string
      enum:
        - image/jpeg
        - image/png
        - image/webp
        - audio/mp4
        - audio/aac
        - audio/mpeg
    Media:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        type:
          $ref: "#/components/schemas/MediaType"
    MediaUploadRequest:
      type: object
      properties:
        media:
          type: string
          format: binary
    Language:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    LanguageArray:
      type: array
      items:
        $ref: "#/components/schemas/Language"
    LanguageListResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/LanguageArray"
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        language_id:
          type: integer
    TagArray:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    TagCreateParams:
      required:
        - languageId
        - name
      type: object
      properties:
        name:
          maximum: 32
          minimum: 1
          type: string
        language_id:
          type: integer
    TagListRequest:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/TagListFilter"
        last_id:
          type: integer
          description: id of last item on previous page
          minimum: 0
        limit:
          maximum: 100
          minimum: 10
          type: integer
          description: amount of items on page
    TagBulkCreateRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagCreateParams"
    TagListResponse:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/TagArray"
        has_next:
          type: boolean
    TagListFilter:
      type: object
      properties:
        name:
          type: string
          description: tag name
        language_id:
          type: integer
    Answer:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        media_id:
          type: string
          format: uuid
    AnswerArray:
      type: array
      items:
        $ref: "#/components/schemas/Answer"
    AnswerCreateRequest:
      required:
        - text
      type: object
      properties:
        text:
          maximum: 100
          minimum: 1
          type: string
        media_id:
          type: string
          format: uuid
    AnswerListRequest:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/AnswerListFilter"
        last_id:
          type: integer
          description: id of last item on previous page
          minimum: 0
        limit:
          type: integer
          description: amount of items on page
          maximum: 100
          minimum: 10
    AnswerListFilter:
      type: object
      properties:
        text:
          type: string
          description: answer text
        language_id:
          type: integer
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: id
      in: cookie
